{"version":3,"sources":["Api/index.js","constants.js","Components/AutoComplete/index.jsx","Pages/Dashboard/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","KEYS","UP","DOWN","ENTER","AutoComplete","props","handleChange","event","setState","value","target","getWords","getSuggestedOptions","toBeSearched","then","suggestions","state","options","slice","split","filter","word","pop","searchedWord","debouncedInputChange","selectOption","inputOption","option","newValue","append","words","join","activeIndex","inputRef","current","focus","highlightOption","replace","RegExp","match","handleKeyPress","e","keyCode","length","preventDefault","handleFocus","isFocused","showOptions","React","createRef","debounce","this","onOutsideClick","id","className","ref","type","onChange","onKeyDown","onFocus","map","index","key","onClick","dangerouslySetInnerHTML","__html","Component","Dashboard","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.708d6378.chunk.js","sourcesContent":["// No changes have been made to this code and is used as it is\n// ================================= Mock Server Start =============================\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","const KEYS = {\n  UP: 38,\n  DOWN: 40,\n  ENTER: 13,\n};\n\nexport default KEYS;\n","import React, { Component } from \"react\";\nimport OnOutsiceClick from \"react-outclick\";\nimport { debounce } from \"lodash\"\nimport getSuggestions from \"../../Api\";\nimport KEYS from \"../../constants\";\nimport \"./Autocomplete.css\";\n\n/* Component is used to display input field and get autocomplete suggestions  */\nclass AutoComplete extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      options: [],\n      activeIndex: 0,\n      searchedWord: '',\n      isFocused: false,\n      showOptions: false\n    }\n\n    // Creating the ref to input for the focus\n    this.inputRef = React.createRef()\n    this.debouncedInputChange = debounce(this.getSuggestedOptions, 500);\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value }, () => {\n      this.getWords()\n    });\n  };\n\n  getSuggestedOptions = (toBeSearched) => {\n    getSuggestions(toBeSearched)\n      .then((suggestions) => {\n        this.setState({ ...this.state, options: suggestions });\n      });\n  }\n\n  // Edge case to not display suggestions when input is empty string is handeled here\n  getWords = () => {\n    const { value } = this.state\n    const tempValue = value\n    if (value !== \"\") {\n      const lastCharacter = tempValue.slice(-1);\n      if (lastCharacter === \" \") {\n        this.setState({ ...this.state, options: [] });\n        return;\n      }\n      const inputs = value.split(\" \")\n        .filter((word) => word !== \"\");\n      const toBeSearched = inputs.pop();\n      this.setState({ ...this.state, searchedWord: toBeSearched });\n      this.debouncedInputChange(toBeSearched)\n    } else {\n      this.setState({ ...this.state, options: [] });\n    }\n  }\n\n  // Space is appended to a suggestion once its selected and incomplete word is replaced with\n  // suggestion here.\n  selectOption = (inputOption) => {\n    const { value } = this.state\n    const option = `${inputOption} `;\n    let newValue = value;\n    if (value === \"\") {\n      newValue.append(option);\n    } else {\n      const words = newValue.split(\" \").slice(0, -1);\n      words.push(option);\n      newValue = words.join(\" \");\n    }\n\n    this.setState({ value: newValue, activeIndex: 0 }, () => {\n      this.getWords()\n    });\n    if (this.inputRef && this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  // Regex is used to find current incomplete word in the suggestions displayed to highlight them\n  highlightOption = (option) =>\n    option.replace(new RegExp(this.state.searchedWord, \"gi\"), (match) =>\n      `<span class=\"highlight\">${match}</span>`);\n\n  handleKeyPress = (e) => {\n    const { activeIndex, options } = this.state\n    // When enter key is pressed, use the selected suggestion\n    if (e.keyCode === KEYS.ENTER) {\n      if (options && options.length && options[activeIndex])\n        this.selectOption(options[activeIndex]);\n    } else if (e.keyCode === KEYS.UP) {\n      e.preventDefault();\n      if (activeIndex === 0) {\n        return;\n      }\n      this.setState({ activeIndex: this.state.activeIndex - 1 });\n    } else if (e.keyCode === KEYS.DOWN) {\n      e.preventDefault();\n      if (activeIndex === options.length - 1) {\n        return;\n      }\n      this.setState({ activeIndex: this.state.activeIndex + 1 });\n    }\n  };\n\n  handleFocus = () => {\n    this.setState({\n      isFocused: !this.state.isFocused,\n      showOptions: true\n    }, () => {\n      this.getWords()\n    });\n  };\n\n  render() {\n    const { value, showOptions, options, activeIndex } = this.state\n\n    return (\n      <OnOutsiceClick onOutsideClick={\n        () => {\n          this.setState({\n            showOptions: false\n          });\n        }\n      }>\n        <div\n          id=\"inputOptionWrapper\"\n          className=\"inputOptionWrapper\"\n        >\n          <input\n            className=\"search\"\n            ref={this.inputRef}\n            type=\"text\"\n            onChange={this.handleChange}\n            onKeyDown={this.handleKeyPress}\n            onFocus={this.handleFocus}\n            value={value}\n          />\n          {!!showOptions && (\n            <div className=\"options\">\n              {\n                options.map((option, index) => (\n                  <div\n                    key={option}\n                    className={index === activeIndex ? \"activeOption option\" : \"option\"}\n                    onClick={() => this.selectOption(option)}\n                    dangerouslySetInnerHTML={{ __html: this.highlightOption(option) }}\n                  />\n                ))\n              }\n            </div>\n          )}\n        </div>\n      </OnOutsiceClick >\n    );\n  }\n};\n\nexport default AutoComplete;\n","import React from \"react\";\nimport AutoComplete from \"../../Components/AutoComplete\";\n\nconst Dashboard = () => (\n  <AutoComplete />\n);\n\nexport default Dashboard;\n","import React from \"react\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Dashboard from \"./Pages/Dashboard\";\n\nconst App = () => (\n  <Router>\n    <Route path=\"/\" component={Dashboard} />\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \"\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \"\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}